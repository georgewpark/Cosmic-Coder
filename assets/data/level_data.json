{
  "level": [
    {
      "title": "Objects",
      "summary": "Your ship has crash landed on an unknown\nplanet and is in need of repair.",
      "pages": 5,
      "pageData": ["Your ship has crashed on an unknown planet and is in need\nof repair. In programming, objects can be used to represent\nphysical entities. An object can have its own individual\nproperties which each hold information related to the object.",
        "Your ship is represented by an object called ‘Ship’. This object\nhas its own properties, each of which have a unique name and\nvalue. These properties store information about the ship. Look\nat the code output to see how the ‘Ship’ object is structured.",
        "You can access an object to change the value of its properties.\nThis is done by writing the name of the object followed by a\ndot ‘.’ and then the name of the property. You would then use\nthe assignment operator ‘=’ followed by a value. ",
        "Example:\n\nObject.property = value;",
        "The ‘Ship’ object has a property called ‘health’ which is\ncurrently set to ‘20’ to represent that the ship is damaged. \nUse dot-notation to access the ‘Ship’ object and set the ‘health’\nproperty to ‘100’. This will fully repair the ship."],
      "top": 290,
      "rows": 4,
      "codeSize": "15.2px",
      "output": "var Ship = {\n  colour: 'green',\n  capacity: 1,\n  speed: 0.0,\n  maxSpeed: 50.0,\n  shields: false,\n  health: 20\n};",
      "expected": "Ship.health=100;",
      "answer": "Ship.health = 100;",
      "ansSize": "23px",
      "hint": "Access the propeties of an object and assign\nvalues using the following structure:\n\nObject.property = value;"
    },
    {
      "title": "Conditionals",
      "summary": "Your ship has reached orbit but must now\nescape the planet's gravitational field.",
      "pages": 7,
      "pageData": ["You have successfully repaired your ship and re-entered\norbit however you must now escape the planet’s gravitational\nfield. You can do this by writing a conditional statement. This\ntype of statement decides what your code should do in a given\nsituation. ",
        "This type of statement is based on a concept of ‘if/then/else’.\nIf a condition is met (returns true) then a statement is executed,\nelse (returns false) a different statement is executed or the\nstep is skipped completely. ",
        "There are comparison operators that allow you to compare\nvalues and test whether a condition has been met or not.\nExamples of comparison operators include the greater than ‘>’\nand less than ‘<’ symbols.",
        "The most common type of conditional statement is an “if-else”\nstatement. If the condition returns true, the statements\nbetween the first set of curly brackets are executed. Otherwise\nthe statements between the second set of curly brackets will\nbe executed.",
        "Example:\nif (Object.property > value) {\n    //True\n} else {    //False    }",
        "The ‘Ship’ object has a property called ‘thrusters’ which\nrepresents whether the ship’s thrusters are enabled or disabled\nand can be set to a value of either true or false. Another\nproperty called ‘actingGravity’ represents the gravity\nacting upon the ship.",
        "Check how these properties are structured in the code output.\nWrite a conditional “if-else” statement to check if the\n‘actingGravity’ on the ship is greater than zero and if so set the\nship’s ‘thrusters’ property to true. Else set the ship’s\nthrusters to false."],
      "top": 278,
      "rows": 5,
      "codeSize": "14.3px",
      "output": "var Ship = {\n  colour: green,\n  capacity: 1,\n  speed: 2.0,\n  maxSpeed: 50.0,\n  thrusters: false,\n  actingGravity: 25\n};",
      "expected": "if(Ship.actingGravity>0){Ship.thrusters=true;}else{Ship.thrusters=false;}",
      "answer": "if (Ship.actingGravity > 0) {\n    Ship.thrusters = true;\n} else {\n    Ship.thrusters = false;\n}",
      "ansSize": "19px",
      "hint": "Use comparison operators such as '<'\n (less than) and '>' (greater than) to\ncompare values."
    },
    {
      "title": "Methods",
      "summary": "Your ship has entered an asteroid field,\nactivate your shields to survive.",
      "pages": 6,
      "pageData": ["Your ship has entered an asteroid field and you must activate\nthe ship’s shields in order to survive. Methods are stored in\nproperties as function definitions and represent actions that\ncan be used to retrieve or update values of an object’s\nproperties. ",
        "Your ship has a method called ‘enableShields’ which sets the\n‘shields’ property to true and the ‘shieldPower’ property to a\nparameter passed to the method. Take a look at how this\nmethod is structured in the code output. ",
        "The method assigns the values to the properties using the ‘this’\nkeyword. It is commonly used inside functions and always\nrefers to one object. In an object method, ‘this’ refers to the\ncontaining object, which in this case is the ‘Ship’ object. ",
        "You can access this method the same way you would access\nany property of an object but you must include a pair of\nbrackets at the end. Parameters to be passed to the method go\ninside these brackets. A comma can be used to separate\nmultiple parameters.",
        "Example:\n\nObject.method(param1, param2);",
        "Access the ‘Ship’ object to call the ‘enableShields’ method,\npassing in a single parameter of 100. This will activate the\nship’s shields and set the shield power to 100%."],
      "top": 290,
      "rows": 4,
      "codeSize": "13.3px",
      "output": "var Ship = {\n  speed: 2,\n  shields: false,\n  shieldPower: 0,\n  enableShields: function(val){\n    this.shields = true;\n    this.shieldPower = val;\n  }\n};",
      "expected": "Ship.enableShields(100);",
      "answer": "Ship.enableShields(100);",
      "ansSize": "21px",
      "hint": "Access an object method and pass in\nparameters using following structure:\n\nObject.method(param);"
    },
    {
      "title": "Arrays",
      "summary": "You have encountered a ship from an enemy\nfaction that is showing hostile intent.",
      "pages": 6,
      "pageData": ["Your ship has encountered another ship from an enemy faction\nthat is showing hostile intent. You must retaliate by firing one\nof your ship’s weapons to destroy the enemy. Your ship’s\nweapons are stored within an array.",
        "Arrays are used to store multiple values that are related to\neach other. Values are assigned to an array inside a pair of\nsquare brackets and each value is separated by a comma.\nmyArray = ['value1', 'value2', 'value 3'];",
        "Each item in an array is given a number/identifier called an\nindex. You can access any element in array by referring to\nits index number. Arrays are zero-indexed meaning the\nnumbering on the array starts at zero, not one.",
        "You can access any value in an array by first writing the name\nof the array followed by a pair of square brackets. The index of\nthe item you wish to access should be placed in these square\nbrackets: myArray[1] would return “value2” from the previous\nexample.",
        "The ‘Ship’ object has a property called ‘weapons’ which\nholds an array of the player’s available weapons. A method\ncalled ‘fire’ will accept a parameter that is used to identify\nthe index of the weapon you wish to fire.",
        "Call the ‘fire’ method passing in the index of the ‘double’\nweapon which will fire two shots at the enemy, destroying\nthe ship."],
      "top": 290,
      "rows": 4,
      "codeSize": "13.5px",
      "output": "var Ship = {\n  speed: 2, \n  shields: true,\n  shieldPower: 100,\n  weapons: ['single', 'double'],\n  fire: function(i){\n    create(this.weapons[i]);\n  }\n};",
      "expected": "Ship.fire(1);",
      "answer": "Ship.fire(1);",
      "ansSize": "23px",
      "hint": "Arrays are zero-indexed meaning they\nare numbered from zero, not one."
    },
    {
      "title": "Loops",
      "summary": "Incrementally increase your ship's speed\n to reach hyper-speed.",
      "pages": 6,
      "pageData": ["Your ship has the ability to travel at hyper-speed however\nthe ship’s speed must be increased incrementally to avoid\ndamage. This can be achieved using a loop. There are many\ndifferent types of loop, but the most common type is the ‘for’\nloop.",
        "A ‘for’ loop is used when a section of code needs to be run for\na specific number of times. A condition will be checked at the\nstart of each loop. If true then the loop repeats until the\ncondition returns false. The condition is usually a counter in\nthis type of loop. ",
        "Example:\nfor (i = 0; i < 10; i++) {\n    //Perform an action.\n}",
        "From the example, ‘i = 0’ sets a variable before the loop starts,\n‘i < 10’ defines the condition for running the loop (value must be\nless than 10), and ‘i++’ increases the value by one each time the\nloop is run.",
        "The ‘Ship’ object has a property called ‘speed’ which holds the\nship’s current speed. Another property called ‘maxSpeed’ holds\nthe maximum speed the ship can reach. Check the value of both\nof these properties in the code output.",
        "The ‘speed’ property should act as the loop initialiser and the\n‘maxSpeed’ property as the loop condition. The counter should\nbe named ‘i’ and increase by one each loop using the “++”\noperator. The player’s speed should be assigned this new\ncounter value."],
      "top": 280,
      "rows": 5,
      "codeSize": "14.5px",
      "output": "var Ship = {\n  colour: 'green',\n  capacity: 1,\n  shields: false,\n  shieldPower: 0,\n  speed: 2.0,\n  maxSpeed: 50.0\n};",
      "expected": "for(i=Ship.speed;i<Ship.maxSpeed;i++){Ship.speed=i;}",
      "answer": "for(i = Ship.speed;\ni < Ship.maxSpeed; i++){\n    Ship.speed = i;\n}",
      "ansSize": "19px",
      "hint": "A 'for' loop has the following structure:\n\nfor (i = initialiser; i < condition; i++) {\n    //Perform an action.\n}"
    },
    {
      "title": "Classes",
      "summary": "Travelling through space is much safer\nin numbers than alone.",
      "pages": 5,
      "pageData": ["Until now your ship has been created using an object literal but\na more effective way of doing this is by using a class. Classes\nprovide a simple syntax to define the state and behaviour of\nobjects such as the one that represents your ship.",
        "To declare a class, use the ‘class’ keyword followed by the\nname of the class. The ‘constructor’ keyword is used to\ndescribe the method of the class that will act as the\nconstructor. This is what will deal with any parameters\npassed to the class.",
        "Check how this is structured in the code output. The ‘Ship’ class\nhas a constructor which takes two parameters which define the\ntype of ship and the colour of the ship. Your ship is then\ndisplayed by creating an instance of the ‘Ship’ class with a type\nof ‘1’ and colour of ‘green’.",
        "This is done by creating a variable using the ‘var’ keyword and\nassigning a new ship object by using the ‘new’ keyword\nfollowed by the ‘Ship’ class name. Your ship passes in 2\nparameters, a type of ‘1’ and a colour of ‘green’.",
        "Use the same structure to create another 2 instances of the\n‘Ship’ class. These ships should be named ‘ship2’ and ‘ship3’.\nThe ‘ship2’ ship should be of type ‘2’ with a colour of ‘blue’ and\nthe ‘ship3’ ship should be of type ‘3’ with a colour of ‘orange’."],
      "top": 280,
      "rows": 5,
      "codeSize": "13.2px",
      "output": "class Ship {\n  constructor(type, colour){\n    this.type = type;\n    this.colour = colour;\n  }\n}\n\nvar ship1 = new Ship(1, 'green');",
      "expected": "varship2=newShip(2,'blue');varship3=newShip(3,'orange');",
      "answer": "var ship2 = new Ship(2, 'blue');\nvar ship3 = new Ship(3, 'orange');",
      "ansSize": "19px",
      "hint": "Create an instance of a class using the\n'new' keyword:\n\n var varName = new className(params);"
    },
    {
      "title": "Inheritance",
      "summary": "You have returned to the mothership.",
      "pages": 5,
      "pageData": ["You have successfully returned to the mothership. As you saw\nin the previous level, classes are an effective way to create\nmultiple instances of an object. Classes can be extended using\nan object-orientated programming technique called inheritance.",
        "The ‘extends’ keyword is used to create a class that is a child\nof another class. If there is a constructor present in sub-class,\nit needs to use the ‘super’ keyword to call the parent class\nconstructor before using ‘this’.",
        "Check how this is structured in the code output. The mothership\nparent/super class has a constructor which takes two\nparameters which define the colour and capacity of the ship.\nA sub-class called ‘Ship’ extends the mothership class as its\nchild.",
        "The mother ship is displayed by creating an instance of the\nmothership object and passing in a colour of ‘red’ and a\ncapacity of ‘20’:\nvar mShip = new Mothership(‘red’, 20);",
        "Create 3 instances of the ‘Ship’ class. These ships should be\nnamed ‘ship1’, ‘ship2’ and ‘ship3’. ‘ship1’ should have a colour of\n‘green’, ‘ship2’ should have a colour of ‘blue’ and ‘ship3’ should\nhave a colour of ‘orange’. All ships are given a capacity of ‘1’ by\nthe sub-class."],
      "top": 310,
      "rows": 3,
      "codeSize": "11.3px",
      "output": "class Mothership {\n  constructor(colour, capacity){\n    this.colour = colour;,\n    this.capacity = capacity;\n  }\n}\nclass Ship extends Mothership {\n  constructor(colour){\n    super(colour, 1);\n  }\n}\nvar mShip = new Mothership('red', 20);",
      "expected": "varship1=newShip('green');varship2=newShip('blue');varship3=newShip('orange');",
      "answer": "var ship1 = new Ship('green');\nvar ship2 = new Ship('blue');\nvar ship3 = new Ship('orange');",
      "ansSize": "19px",
      "hint": "Create an instance of a class using the\n'new' keyword:\n\n var varName = new className(params);"
    }
  ]
}